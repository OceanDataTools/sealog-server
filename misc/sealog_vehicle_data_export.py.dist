#!/usr/bin/env python3
'''
FILE:           sealog_vehicle_data_export.py

DESCRIPTION:    This script exports all the data for a given lowering, creates
                all the reports for that lowering, and pushes the data to the
                OpenVDM data directory for that lowering.

BUGS:
NOTES:
AUTHOR:     Webb Pinner
COMPANY:    OceanDataTools.org
VERSION:    0.4
CREATED:    2018-11-07
REVISION:   2021-05-10

LICENSE INFO:   This code is licensed under MIT license (see LICENSE.txt for details)
                Copyright (C) OceanDataTools.org 2021
'''

import os
import json
import logging
import tempfile
import subprocess
import glob
from datetime import datetime

from python_sealog.settings import API_SERVER_FILE_PATH
from python_sealog.cruises import get_cruises, get_cruise_by_id, get_cruise_by_lowering
from python_sealog.lowerings import get_lowerings, get_lowering_by_id, get_lowerings_by_cruise
from python_sealog.misc import get_framegrab_list_by_lowering
from python_sealog.events import get_events_by_lowering
from python_sealog.event_aux_data import get_event_aux_data_by_lowering
from python_sealog.event_exports import get_event_export, get_event_exports_by_lowering
from python_sealog.event_templates import get_event_templates
from filecrop_utility import FileCropUtility
from sealog_lowering_nav_2_csv import ExportLoweringNav2CSV

from sealog_build_cruise_summary_report import CruiseSummaryReport
from sealog_build_lowering_summary_report import LoweringSummaryReport

EXPORT_ROOT_DIR = '/home/sealog/sealog-export'
VEHICLE_NAME = 'Explorer'
NAV_DATASOURCE = 'vehicleRealtimeNavData'

RAW_DATA_DIR = '/mnt/nfs/CruiseData/'
CROPPED_DATA_DIR = '/home/sealog/cropped_data'
OPENRVDAS_SOURCE_DIR = 'Vessel/OpenRVDAS/raw'
OPENRVDAS_DEST_DIR = 'OpenRVDAS/raw'

POST_CRUISE_REPORT_DIR = 'Documents/PostCruise_Reports'

DATA_FILES_DEFS = [
    { 'source_regex': 'GGA_*', 'output_prefix': 'GGA_'}
]

OPENVDM_IP='openvdm.oceandatatools.org'
OPENVDM_USER='survey'
OPENVDM_SSH_KEY='/home/sealog/.ssh/id_rsa_openvdm'
CRUISEDATA_DIR_ON_DATA_WAREHOUSE='/mnt/vault/FTPRoot/CruiseData'
OPENVDM_VEHICLE_DIR='Vehicles/' + VEHICLE_NAME
SEALOG_DIR='Sealog'

CREATE_DEST_DIR = False

CRUISES_FILE_PATH = os.path.join(API_SERVER_FILE_PATH, 'cruises')
IMAGES_FILE_PATH = os.path.join(API_SERVER_FILE_PATH, 'images')
LOWERINGS_FILE_PATH = os.path.join(API_SERVER_FILE_PATH, 'lowerings')

REPORTS_DIRNAME = 'Reports'
IMAGES_DIRNAME = 'Images'
FILES_DIRNAME = 'Files'

def _export_dir_name(cruise_id, lowering_id):
    if lowering_id[1:].isnumeric():
        return cruise_id + '_' + lowering_id

    return lowering_id


def _verify_source_directories():

    if not os.path.isdir(CRUISES_FILE_PATH):
        return False, "cannot find cruises file path"

    if not os.path.isdir(IMAGES_FILE_PATH):
        return False, "cannot find images file path"

    if not os.path.isdir(LOWERINGS_FILE_PATH):
        return False, "cannot find lowerings file path"

    return True, ''


def _build_cruise_export_dirs(cruise):

    logging.info("Building cruise-level export directories")

    try:
        os.mkdir(os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id']))
    except FileExistsError:
        logging.debug("cruise export directory already exists")
    except Exception as err:
        logging.error("Could not create cruise export directory")
        logging.debug(str(err))
        sys.exit(1)

    try:
        os.mkdir(os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], REPORTS_DIRNAME))
    except FileExistsError:
        logging.debug("cruise export reports directory already exists")
    except Exception as err:
        logging.error("Could not create cruise reports export directory")
        logging.debug(str(err))
        sys.exit(1)

    try:
        os.mkdir(os.path.join(CROPPED_DATA_DIR, cruise['cruise_id']))
    except FileExistsError:
        logging.debug("cruise cropped data export directory already exists")
    except Exception as err:
        logging.error("Could not create cruise cropped data export directory")
        logging.debug(str(err))
        sys.exit(1)


def _build_lowering_export_dirs(cruise, lowering): #pylint: disable=redefined-outer-name

    logging.info("Building lowering-level export directories")

    try:
        os.mkdir(os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id'])))
    except FileExistsError:
        logging.debug("lowering export directory already exists")
    except Exception as err:
        logging.error("Could not create lowering export directory")
        logging.debug(str(err))
        sys.exit(1)

    try:
        os.mkdir(os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), REPORTS_DIRNAME))
    except FileExistsError:
        logging.debug("lowering export reports directory already exists")
    except Exception as err:
        logging.error("Could not create lowering reports export directory")
        logging.debug(str(err))
        sys.exit(1)

    try:
        os.mkdir(os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), IMAGES_DIRNAME))
    except FileExistsError:
        logging.debug("lowering export images directory already exists")
    except Exception as err:
        logging.error("Could not create lowering images export directory")
        logging.debug(str(err))
        sys.exit(1)

    try:
        os.makedirs(os.path.join(CROPPED_DATA_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), OPENRVDAS_DEST_DIR))
    except FileExistsError:
        logging.debug("lowering export directory already exists")
    except Exception as err:
        logging.error("Could not create lowering export directory")
        logging.debug(str(err))
        sys.exit(1)


def _build_lowering_marker(lowering): #pylint: disable=redefined-outer-name

    try:
        on_bottom_event = list(filter(lambda event: event['ts'] == lowering['lowering_additional_meta']['milestones']['lowering_on_bottom'], get_events_by_lowering(lowering['id'])))[0]

    except Exception as err:
        logging.warning('Could not find on_bottom milestone for lowering %s', lowering['lowering_id'])
        logging.debug(str(err))
        return None

    try:
        on_bottom_event_export = get_event_export(on_bottom_event['id'])
        # logging.debug("on_bottom_event_export: %s", json.dumps(on_bottom_event_export, indent=2))
        vehicle_realtime_nav_data = list(filter(lambda aux_data: aux_data['data_source'] == NAV_DATASOURCE, on_bottom_event_export['aux_data']))[0]
        # logging.debug("vehicle_realtime_nav_data: %s", vehicle_realtime_nav_data)
        lat = list(filter(lambda data_item: data_item['data_name'] == 'latitude', vehicle_realtime_nav_data['data_array']))[0]['data_value']
        lon = list(filter(lambda data_item: data_item['data_name'] == 'longitude', vehicle_realtime_nav_data['data_array']))[0]['data_value']
        depth = list(filter(lambda data_item: data_item['data_name'] == 'depth', vehicle_realtime_nav_data['data_array']))[0]['data_value']

        # DiveID,lat,Lon,depth.txt
        return lowering['lowering_id'] + ',' + str(lat) + ',' + str(lon) + ',' + str(depth * -1)

    except Exception as err:
        logging.warning('Could not extract nav data from on_bottom event for lowering: %s', lowering['lowering_id'])
        logging.debug(str(err))

    return None


def _export_lowering_markers_file(cruise):

    logging.info("Exporting lowering markers file")

    cruise_lowerings = get_lowerings_by_cruise(cruise['id'])

    lowering_markers = []

    for cruise_lowering in cruise_lowerings:

        lowering_marker = _build_lowering_marker(cruise_lowering)
        # logging.debug(lowering_marker)

        if lowering_marker:
            lowering_markers.append(lowering_marker)

    filename = VEHICLE_NAME + '_' + cruise['cruise_id'] + '_loweringMarkers.txt'
    dest_filepath = os.path.join(API_SERVER_FILE_PATH, 'cruises', cruise['id'], filename)

    try:
        with open(dest_filepath, 'w') as file:
            for marker in lowering_markers:
                # logging.debug(marker)
                file.write(marker + '\r\n')
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))


def _export_lowering_sealog_data_files(cruise, lowering): # pylint: disable=too-many-statements, redefined-outer-name

    logging.info("Exporting lowering-level data files")

    filename = VEHICLE_NAME + '_' + lowering['lowering_id'] + '_loweringRecord.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), filename)

    logging.info("Export Lowering Record: %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(lowering))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VEHICLE_NAME + '_' + lowering['lowering_id'] + '_eventOnlyExport.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), filename)

    logging.info("Export Events (json-format): %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(get_events_by_lowering(lowering['id'])))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VEHICLE_NAME + '_' + lowering['lowering_id'] + '_eventOnlyExport.csv'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), filename)

    logging.info("Export Events (csv-format): %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(get_events_by_lowering(lowering['id'], 'csv'))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VEHICLE_NAME + '_' + lowering['lowering_id'] + '_auxDataExport.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), filename)

    logging.info("Export Aux Data: %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(get_event_aux_data_by_lowering(lowering['id'])))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VEHICLE_NAME + '_' + lowering['lowering_id'] + '_sealogExport.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), filename)

    logging.info("Export Events with Aux Data (json-format): %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(get_event_exports_by_lowering(lowering['id'])))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VEHICLE_NAME + '_' + lowering['lowering_id'] + '_sealogExport.csv'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), filename)

    logging.info("Export Events with Aux Data (csv-format): %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(get_event_exports_by_lowering(lowering['id'], 'csv'))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VEHICLE_NAME + '_' + lowering['lowering_id'] + '_eventTemplates.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), filename)

    logging.info("Export Event Templates: %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(get_event_templates()))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    logging.info("Export Images")
    framegrab_list = get_framegrab_list_by_lowering(lowering['id'])

    with tempfile.NamedTemporaryFile(mode='w+b', delete=False) as file:
        for framegrab in framegrab_list:

            framegrab = os.path.basename(framegrab)
            file.write(str.encode(framegrab + '\n'))

        subprocess.call(['rsync','-avi','--progress', '--delete', '--files-from=' + file.name , os.path.join(API_SERVER_FILE_PATH, 'images', ''), os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), IMAGES_DIRNAME)])

    logging.info("Export Reports")
    subprocess.call(['rsync','-avi','--progress', '--delete', '--include=*.pdf', '--exclude=*', os.path.join(API_SERVER_FILE_PATH, 'lowerings', lowering['id'], ''), os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), REPORTS_DIRNAME)])

    logging.info("Export Nav CSV")
    subprocess.call(['rsync','-avi','--progress', os.path.join(API_SERVER_FILE_PATH, 'lowerings', lowering['id'], VEHICLE_NAME + '_' + lowering['lowering_id'] + '_nav.csv'), os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']))])


def _export_lowering_openrvdas_data_files(cruise, lowering): #pylint: disable=redefined-outer-name

    logging.info("Exporting lowering-level OpenRVDAS data files")

    fcu = FileCropUtility(datetime.strptime(lowering['start_ts'], '%Y-%m-%dT%H:%M:%S.%fZ'), datetime.strptime(lowering['stop_ts'], '%Y-%m-%dT%H:%M:%S.%fZ'))

    for data_file_def in DATA_FILES_DEFS:

        source_regex = os.path.join(RAW_DATA_DIR,cruise['cruise_id'], OPENRVDAS_SOURCE_DIR, data_file_def['source_regex'])
        source_files = glob.glob(os.path.join(RAW_DATA_DIR,cruise['cruise_id'], OPENRVDAS_SOURCE_DIR, data_file_def['source_regex']))
        destination_file = os.path.join(CROPPED_DATA_DIR,cruise['cruise_id'],lowering['lowering_id'],OPENRVDAS_DEST_DIR,data_file_def['output_prefix'] + lowering['lowering_id'] + '.txt')

        logging.debug('Source regex: %s', source_regex)
        logging.debug('Source files: \n\t%s', '\n\t'.join(source_files))
        logging.debug('Destination file: %s', destination_file)

        try:
            culled_files = fcu.cull_files(source_files)
            logging.debug("Culled Files:\n\t%s",'\n\t'.join(culled_files))

            if len(culled_files) > 0:
                with open(destination_file, 'w') as file:
                    for line in fcu.crop_file_data(culled_files):
                        file.write(line)
            else:
                logging.warning("No files containing data in the specified range")

        except Exception as err:
            logging.warning("Could not create cropped data file: %s", destination_file)
            logging.debug(str(err))


def _export_lowering_nav_csv_files(lowering): #pylint: disable=redefined-outer-name

    logging.info("Exporting lowering nav data to csv")

    dest_dir = os.path.join(API_SERVER_FILE_PATH, 'lowerings', lowering['id'])
    filename = VEHICLE_NAME + '_' + lowering['lowering_id'] + '_nav.csv'

    lowering_export = ExportLoweringNav2CSV(lowering['lowering_id'])

    try:
        with open(os.path.join(dest_dir, filename), 'w') as out_file:
            out_file.write(str(lowering_export))

    except IOError:
        logging.error("Error saving nav csv export file: %s", os.path.join(dest_dir, filename))


def _export_cruise_data_files(cruise):

    logging.info("Exporting cruise-level data files")

    filename = VEHICLE_NAME + '_' + cruise['cruise_id'] + '_cruiseRecord.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], filename)

    logging.info("Export Cruise Record: %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(cruise))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VEHICLE_NAME + '_' + cruise['cruise_id'] + '_eventTemplates.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], filename)

    logging.info("Export Event Templates: %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(get_event_templates()))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    logging.info("Export Reports")
    subprocess.call(['rsync','-avi','--progress', '--delete', '--include=*.pdf', '--exclude=*', os.path.join(API_SERVER_FILE_PATH, 'cruises', cruise['id'], ''), os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], REPORTS_DIRNAME)])


def _build_cruise_reports(cruise):

    logging.info("Building cruise reports")

    report_dest_dir = os.path.join(API_SERVER_FILE_PATH, 'cruises', cruise['id'])

    report_filename =    VEHICLE_NAME + '_' + cruise['cruise_id'] + '_Cruise_Summary_Report.pdf'
    logging.info("Building Cruise Summary Report: %s", report_filename)
    cruise_summary_report = CruiseSummaryReport(cruise['id'])

    try:
        with open(os.path.join(report_dest_dir, report_filename), 'wb') as file:
            file.write(cruise_summary_report.export_pdf())

    except Exception as err:
        logging.error("Unable to build report")
        logging.debug(str(err))


def _build_lowering_reports(lowering): #pylint: disable=redefined-outer-name

    logging.info("Building lowering reports")

    report_dest_dir = os.path.join(API_SERVER_FILE_PATH, 'lowerings', lowering['id'])

    summary_report_filename = VEHICLE_NAME + '_' + lowering['lowering_id'] + '_Dive_Summary_Report.pdf'
    logging.info("Building Lowering Summary Report: %s", summary_report_filename)
    lowering_summary_report = LoweringSummaryReport(lowering['id'])

    try:
        with open(os.path.join(report_dest_dir, summary_report_filename), 'wb') as file:
            file.write(lowering_summary_report.export_pdf())

    except Exception as err:
        logging.error("Unable to build report")
        logging.debug(str(err))

    vehicle_report_filename = VEHICLE_NAME + '_' + lowering['lowering_id'] + '_Dive_Vehicle_Report.pdf'
    logging.info("Building Lowering Vehicle Report: %s", vehicle_report_filename)
    lowering_vehicle_report = LoweringVehicleReport(lowering['id'])

    try:
        with open(os.path.join(report_dest_dir, vehicle_report_filename), 'wb') as file:
            file.write(lowering_vehicle_report.export_pdf())

    except Exception as err:
        logging.error("Unable to build report")
        logging.debug(str(err))


def _push_2_data_warehouse(cruise, lowering): #pylint: disable=redefined-outer-name

    if CREATE_DEST_DIR:
        command = ['ssh', '-i', OPENVDM_SSH_KEY, OPENVDM_USER + '@' + OPENVDM_IP, 'cd ' + os.path.join(CRUISEDATA_DIR_ON_DATA_WAREHOUSE,cruise['cruise_id'],OPENVDM_VEHICLE_DIR) + '; test -d ' + os.path.join(_export_dir_name(cruise['cruise_id'], lowering['lowering_id']),SEALOG_DIR) + ' || mkdir -p ' + os.path.join(_export_dir_name(cruise['cruise_id'], lowering['lowering_id']),SEALOG_DIR) + '']
        logging.debug(' '.join(command))
        subprocess.call(command)

        command = ['ssh', '-i', OPENVDM_SSH_KEY, OPENVDM_USER + '@' + OPENVDM_IP, 'cd ' + os.path.join(CRUISEDATA_DIR_ON_DATA_WAREHOUSE,cruise['cruise_id'],OPENVDM_VEHICLE_DIR) + '; test -d ' + os.path.join(_export_dir_name(cruise['cruise_id'], lowering['lowering_id']),OPENRVDAS_DEST_DIR) + ' || mkdir -p ' + os.path.join(_export_dir_name(cruise['cruise_id'], lowering['lowering_id']),OPENRVDAS_DEST_DIR) + '']
        logging.debug(' '.join(command))
        subprocess.call(command)

    command = ['rsync','-trimv','--progress', '-e', 'ssh -i ' + OPENVDM_SSH_KEY, os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], REPORTS_DIRNAME, ''), OPENVDM_USER + '@' + OPENVDM_IP + ':' + os.path.join(CRUISEDATA_DIR_ON_DATA_WAREHOUSE,cruise['cruise_id'], POST_CRUISE_REPORT_DIR, '')]
    logging.debug(' '.join(command))
    subprocess.call(command)

    command = ['rsync','-trimv','--progress', '--delete', '-e', 'ssh -i ' + OPENVDM_SSH_KEY, os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), ''), OPENVDM_USER + '@' + OPENVDM_IP + ':' + os.path.join(CRUISEDATA_DIR_ON_DATA_WAREHOUSE,cruise['cruise_id'],OPENVDM_VEHICLE_DIR,_export_dir_name(cruise['cruise_id'], lowering['lowering_id']),SEALOG_DIR, '')]
    logging.debug(' '.join(command))
    subprocess.call(command)

    command = ['rsync','-trimv','--progress', '--delete', '-e', 'ssh -i ' + OPENVDM_SSH_KEY, os.path.join(CROPPED_DATA_DIR, cruise['cruise_id'], _export_dir_name(cruise['cruise_id'], lowering['lowering_id']), OPENRVDAS_DEST_DIR, ''), OPENVDM_USER + '@' + OPENVDM_IP + ':' + os.path.join(CRUISEDATA_DIR_ON_DATA_WAREHOUSE,cruise['cruise_id'],OPENVDM_VEHICLE_DIR,_export_dir_name(cruise['cruise_id'], lowering['lowering_id']),OPENRVDAS_DEST_DIR, '')]
    logging.debug(' '.join(command))
    subprocess.call(command)

if __name__ == '__main__':

    import argparse
    import sys

    parser = argparse.ArgumentParser(description='Sealog ' + VEHICLE_NAME + ' Data export')
    parser.add_argument('-v', '--verbosity', dest='verbosity',
                        default=0, action='count',
                        help='Increase output verbosity')
    parser.add_argument('-n', '--no-transfer', action='store_true', default=False, help='build reports and export data but do not push to data warehouse')
    parser.add_argument('-c', '--current_cruise', action='store_true', default=False, help=' export the data for the most recent cruise')
    parser.add_argument('-L', '--lowering_id', help='export data for the specified lowering (i.e. S0314)')
    parser.add_argument('-C', '--cruise_id', help='export all cruise and lowering data for the specified cruise (i.e. FK200126)')

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).

    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    if parsed_args.current_cruise and ( parsed_args.lowering_id or parsed_args.cruise_id ):
        logging.error("Can not specify current_cruise and also a lowering {(}-l{)} or cruise {(}-c{)}")
        sys.exit(0)

    if parsed_args.lowering_id and parsed_args.cruise_id:
        logging.error("Can not specify a lowering {(}-l{)} and cruise {(}-c{)}")
        sys.exit(0)

    cruise = None
    lowerings = []

    # if exporting all lowerings for the current cruise
    if parsed_args.current_cruise:
        cruise = next(iter(get_cruises()), None)

        if cruise is None:
            logging.error("There are no cruises available for export")
            sys.exit(0)

        lowerings = get_lowerings_by_cruise(cruise['id'])

    # if exporting for all lowering from a specific cruise
    elif parsed_args.cruise_id:
        cruise = get_cruise_by_id(parsed_args.cruise_id)

        if cruise is None:
            logging.error("Cruise %s not found", parsed_args.cruise_id)
            sys.exit(0)

        lowerings = get_lowerings_by_cruise(cruise['id'])

    # if exporting for a specific lowering
    elif parsed_args.lowering_id:
        lowerings = [get_lowering_by_id(parsed_args.lowering_id)]

        if lowerings[0] is None:
            logging.error("Lowering %s not found", parsed_args.lowering_id)
            sys.exit(0)

        cruise = get_cruise_by_lowering(lowerings[0]['id'])
        
    # if exporting for the most recent lowering
    else:
        lowerings = [next(iter(get_lowerings()), None)]

        if lowerings[0] is None:
            logging.error("There are no lowerings available for export")
            sys.exit(0)

        cruise = get_cruise_by_lowering(lowerings[0]['id'])

    if len(lowerings) == 0:
        logging.warning("There are no lowerings for the specified cruise")

    logging.info("Exporting the follow data:")
    logging.info("\tCruise: %s", cruise['cruise_id'])
    logging.info("\tLowering(s): %s", ', '.join([lowering['lowering_id'] for lowering in lowerings]) if len(lowerings) > 0 else "\t NONE")

    # Verify source directories
    success, msg = _verify_source_directories()
    if not success:
        logging.error(msg)
        sys.exit(0)

    # Verify export root directory
    if not os.path.isdir(EXPORT_ROOT_DIR):
        logging.error("Cannot find export directory: %s", EXPORT_ROOT_DIR)
        sys.exit(1)

    # current_cruise source dir
    cruise_source_dir = os.path.join(CRUISES_FILE_PATH, cruise['id'])

    #verify cruise source directory exists
    try:
        os.path.isdir(cruise_source_dir)
    except Exception as err:
        logging.error('Cannot find source directory for cruise: %s', cruise_source_dir)
        sys.exit(1)

    # build cruise report
    _build_cruise_reports(cruise)

    # build cruise export dirs
    _build_cruise_export_dirs(cruise)

    # export cruise data files
    _export_cruise_data_files(cruise)

    # export lowering markers file
    _export_lowering_markers_file(cruise)

    # for each lowering in cruise
    for lowering in lowerings:
        logging.info("Lowering: %s", lowering['lowering_id'])

        # lowering source dir
        lowering_source_dir = os.path.join(LOWERINGS_FILE_PATH, lowering['id'])

        #verify cruise source directory exists
        if not os.path.isdir(lowering_source_dir):
            logging.error('Cannot find source directory for lowering: %s', lowering_source_dir)
            sys.exit(1)

        # build lowering reports
        _build_lowering_reports(lowering)

        # build lowering export dirs
        _build_lowering_export_dirs(cruise, lowering)

        # export lowering nav2csv data file
        _export_lowering_nav_csv_files(lowering)

        # export lowering data files
        _export_lowering_sealog_data_files(cruise, lowering)

        # export lowering cropped data files
        _export_lowering_openrvdas_data_files(cruise, lowering)

    # sync data to data warehouse
    if not parsed_args.no_transfer:
        _push_2_data_warehouse(cruise, lowering)

    logging.debug("Done")
