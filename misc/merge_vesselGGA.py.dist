#!/usr/bin/env python3
#
#  Purpose: This script takes a lowering ID and raw POS/MV GGA file and 
#           creates new aux_data records within Sealog
#
#    Usage: Type python3 merge_vessel.py <lowering_id> <raw_vessel_file> to run the script.
#            - <lowering_id>: the lowering ID (J2-1042)
#            - <raw_vesselGGA_file>: the raw_vesselGGA file name with absolute/relative path (./COM30-POSMV-NMEA-GGA-RAW_20200128-234312.Raw)
#
#   Author: Webb Pinner webbpinner@gmail.com
#  Created: 2018-11-07
# Modified: 2020-02-21

import requests
import json
import csv
import logging
from datetime import datetime

from python_sealog.settings import apiServerURL, eventAuxDataAPIPath, headers
from python_sealog.lowerings import getLoweringUIDByID
from python_sealog.events import getEventsByLowering

# default log level
LOG_LEVEL = logging.INFO

# create logger
logging.basicConfig(level=LOG_LEVEL,
                    format='%(asctime)s - %(name)s:%(lineno)s - %(levelname)s - %(message)s'
                   )

logger = logging.getLogger(__file__)

auxDataTemplate = {
    'event_id': None,
    'data_source': None,
    'data_array': []
}

def _convertGGA_LL(value, hemisphere):

  deg = None
  try:
    if hemisphere == "E" or hemisphere == "e":
      deg = round(int(value[:3]) + float(value[3:])/60, 6)

    elif hemisphere == "W" or hemisphere == "w":
      deg = round((int(value[:3]) + float(value[3:])/60) * -1, 6)

    elif hemisphere == "N" or hemisphere == "n":
      deg = round(int(value[:2]) + float(value[2:])/60, 6)

    elif hemisphere == "S" or hemisphere == "s":
      deg = round((int(value[:2]) + float(value[2:])/60) * -1, 6)

  except Exception as error:
    logger.error("Unable to parse " + value)

  return deg


def match_raw_vesselGGA_to_event(raw_vesselGGA_file, events, dryrun):

    for event in events:
        event['ts'] = datetime.strptime(event['ts'], '%Y-%m-%dT%H:%M:%S.%fZ').strftime('%Y-%m-%dT%H:%M:%S.000Z')

    raw_vesselGGA_data_array = []

    with open(raw_vesselGGA_file) as f:
        reader = csv.reader(f, skipinitialspace=True)

        for row in reader:

            raw_ts = datetime.strptime(row[0] + ' ' + row[1], '%m/%d/%Y %H:%M:%S.%f').strftime('%Y-%m-%dT%H:%M:%S.000Z')
            eventIDArray = filter(lambda event: event['ts'] == raw_ts, events)

            for event in eventIDArray:

                try:
                    raw_data = {}
                    raw_data['event_id'] = event['id']
                    raw_data['data_source'] = "vesselRealtimeNavData"
                    raw_data['data_array'] = []
                    raw_data['data_array'].append({ 'data_name': 'latitude','data_value': _convertGGA_LL(row[4],row[5])})
                    raw_data['data_array'].append({ 'data_name': 'longitude','data_value': _convertGGA_LL(row[6],row[7])})
                    
                    logger.debug("Adding Aux Data Record to event: " + event['ts'] + ' --> ' + event['event_value'])
                except:
                    logger.debug("Unable to process row")
                    logger.debug(row)
                    continue

                if not dryrun:
                    try:

                        r = requests.post(apiServerURL + eventAuxDataAPIPath, headers=headers, data = json.dumps(raw_data))
                    except Exception as error:
                        logger.debug("Error: " + error)
                        logger.debug("Event: " + event)

if __name__ == '__main__':

    import argparse
    import sys
    import os


    parser = argparse.ArgumentParser(description='Sealog Vessel GGA Inserter 2000')
    parser.add_argument('-d', '--debug', action='store_true', help=' display debug messages')
    parser.add_argument('-n', '--dryrun', action='store_true', default=False, help=' build new aux data records but do not commit the records to the database')
    parser.add_argument('lowering_id', help='The lowering to process (i.e. S0314)')
    parser.add_argument('raw_vesselGGA_file', help='The raw_vesselGGA file containing the vessel position data')

    args = parser.parse_args()

    # Turn on debug mode
    if args.debug:
        logger.info("Setting log level to DEBUG")
        logger.setLevel(logging.DEBUG)

        for handler in logger.handlers:
            handler.setLevel(logging.DEBUG)

        logger.debug("Log level now set to DEBUG")

    if not os.path.isfile(args.raw_vesselGGA_file):
        logger.debug("ERROR: raw_vesselGGA file " + args.raw_vesselGGA_file + " not found")
        sys.exit(1)

    lowering_uid = getLoweringUIDByID(args.lowering_id)

    if not lowering_uid:
        logger.debug("ERROR: lowering " + args.lowering_id + " not found")
        sys.exit(1)

    logger.debug("lowering_uid: " + lowering_uid)
    lowering_events = getEventsByLowering(lowering_uid)

    match_raw_vesselGGA_to_event(args.raw_vesselGGA_file, lowering_events, args.dryrun)