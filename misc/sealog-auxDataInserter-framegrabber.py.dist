#!/usr/bin/env python3
#
#  Purpose: This service listens for new events submitted to Sealog, creates
#           an aux_data record containing framegrabber camera names and image
#           file names and associates the aux data record with the newly
#           created event.
#
#           However this will only happen if the timestamp of the event
#           is within 120 seconds from the current server time.
#
#    Usage: Type python3 sealog-auxDataInserter-framegrabber.py to start the
#           service.
#
#           This serivce runs in the forground. Type ^d to kill the service.
#
#   Author: Webb Pinner webbpinner@gmail.com
#  Created: 2020-03-09
# Modified: 

import asyncio
import websockets
import json
import os
import requests
import logging
from datetime import datetime
from pymongo import MongoClient

from python_sealog.settings import apiServerFilePath, apiServerURL, wsServerURL, eventAuxDataAPIPath, headers

destDir = os.path.join(apiServerFilePath,'images')

# set of events to ignore
excludeSet = ()

clientWSID = 'auxData-frameGrabInserter'

framegrabbers = [
    { 'camera_name': 'sitcam', 'url': 'http://10.23.9.211/images/sitcam.jpg', 'filetype': 'jpg' },
    { 'camera_name': 'scicam', 'url': 'http://10.23.9.212/images/scicam.jpg', 'filetype': 'jpg' }
]

hello = {
  'type': 'hello',
  'id': clientWSID,
  'auth': {
    'headers': headers
  },
  'version': '2',
  'subs': ['/ws/status/newEvents']
}

ping = {
  'type':'ping',
  'id':clientWSID
}

auxDataTemplate = {
  'event_id': None,
  'data_source': None,
  'data_array': []
}

client = MongoClient()
db = client.udpDataCache
collection = db.navData

LOG_LEVEL = logging.INFO

# create logger
logger = logging.getLogger(__file__)
logger.setLevel(LOG_LEVEL)

# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(LOG_LEVEL)

# create formatter
formatter = logging.Formatter('%(asctime)s - %(name)s:%(lineno)s - %(levelname)s - %(message)s')

# add formatter to ch
ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(ch)

async def auxDataInserter():
  try:
    async with websockets.connect(wsServerURL) as websocket:

      await websocket.send(json.dumps(hello))

      while(True):

        event = await websocket.recv()
        eventObj = json.loads(event)

        if eventObj['type'] and eventObj['type'] == 'ping':
          await websocket.send(json.dumps(ping))
        elif eventObj['type'] and eventObj['type'] == 'pub' and eventObj['message']['event_value'] not in excludeSet:

          auxData = {
            'event_id': eventObj['message']['id'],
            'data_source': 'vehicleRealtimeFramegrabberData',
            'data_array': []
          }

          timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S%f")[:-3]

          for framegrabber in framegrabbers:      

            filename = framegrabber['camera_name'] + '_' + timestamp + '_' + eventObj['message']['event_value'].lower().replace(' ', '_') + '.' + framegrabber['filetype']
            dst = os.path.join(destDir, filename)

            try:
              r = requests.get(framegrabber['url'], timeout=2)
              with open(dst, 'wb') as f:
                f.write(r.content)

              auxData['data_array'].append({ 'data_name': "camera_name",'data_value': framegrabber['camera_name'] })
              auxData['data_array'].append({ 'data_name': "filename",'data_value': filename })

              logger.debug("Aux Data Record:\n" + json.dumps(auxData, indent=2))

            except Exception as error:
              logger.error("Error creating auxData record: " + str(error))
            
          if len(auxData['data_array']) > 0:
            try:
              logger.debug("Submitting AuxData record to Sealog Server")
              r = requests.post(apiServerURL + eventAuxDataAPIPath, headers=headers, data = json.dumps(auxData))
              logger.debug("Response: " + r.text)

            except Exception as error:
              logger.error("Error submitting auxData record: " + str(error))

        else:
          logger.debug("Skipping because event value is in the exclude set")

  except Exception as error:
    logger.error(str(error))

if __name__ == '__main__':

  import argparse
  import sys

  parser = argparse.ArgumentParser(description='Aux Data Inserter Service - Framegrabber Data')
  parser.add_argument('-d', '--debug', action='store_true', help=' display debug messages')

  args = parser.parse_args()

  # Turn on debug mode
  if args.debug:
    logger.info("Setting log level to DEBUG")
    logger.setLevel(logging.DEBUG)
    for handler in logger.handlers:
      handler.setLevel(logging.DEBUG)
    logger.debug("Log level now set to DEBUG")
  
  # Run the main loop
  try:
    asyncio.get_event_loop().run_until_complete(auxDataInserter())
  except KeyboardInterrupt:
    print('Interrupted')
    try:
      sys.exit(0)
    except SystemExit:
      os._exit(0)