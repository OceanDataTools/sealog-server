#!/usr/bin/env python3
#
# Purpose: This service listens to the specified UDP port and specified
#          message headers, parses those messages and caches the lastest
#          values to a MongoDB collection.
#
#   Usage: Type python3 sealog-udp2MongoDB.py to start the service.
#
#          This serivce runs in the forground. Type ^d to kill the
#          service.
#
#  Author: Webb Pinner webbpinner@gmail.com
# Created: 2018-09-26

import socket
import logging
import datetime
import time
import json

from pymongo import MongoClient

UDP_IP_ADDRESS = "0.0.0.0"
UDP_PORT_NO = 10000

DATABASE = 'sealog_udp_cache'
COLLECITON = 'udpData'

LOG_LEVEL = logging.INFO

# Valid line headers to process
validLineLabels = ['GGA']

# create logger
logger = logging.getLogger(__file__ )
logger.setLevel(LOG_LEVEL)

# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(LOG_LEVEL)

# create formatter
formatter = logging.Formatter('%(asctime)s - %(name)s:%(lineno)s - %(levelname)s - %(message)s')

# add formatter to ch
ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(ch)

def _convertGGA_LL(value, hemisphere):

  deg = None
  try:
    if hemisphere == "E" or hemisphere == "e":
      deg = round(int(value[:3]) + float(value[3:])/60, 6)

    elif hemisphere == "W" or hemisphere == "w":
      deg = round((int(value[:3]) + float(value[3:])/60) * -1, 6)

    elif hemisphere == "N" or hemisphere == "n":
      deg = round(int(value[:2]) + float(value[2:])/60, 6)

    elif hemisphere == "S" or hemisphere == "s":
      deg = round((int(value[:2]) + float(value[2:])/60) * -1, 6)

  except Exception as error:
    logger.error("Unable to parse " + value)

  return deg

def parseGGA(message, label=None):

  try:
    msg_array = message.split(",")

    if label ==None:
      label = msg_array[0]

    record = {
      "label": label,
      "updated": datetime.datetime.utcnow(),
      "data": {
        "latitude": _convertGGA_LL(msg_array[2],msg_array[3]),
        "longitude": _convertGGA_LL(msg_array[4],msg_array[5]),
        "depth": float(msg_array[9]) * -1
      }
    }

    return record

  except Exception as error:
    logger.error("Error parsing message")


def insertUDPData():

  client = MongoClient()
  db = client[DATABASE]
  collection = db[COLLECITON]

  serverSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  serverSock.bind((UDP_IP_ADDRESS, UDP_PORT_NO))

  while True:
    bytes, addr = serverSock.recvfrom(1024)
    data = None
    try:
      data = bytes.decode('utf-8')
    except Exception as error:
      logger.error("Unable to parse message")
      logger.error(error)
      continue

    logger.debug(data)

    messageType = None
    for label in validLineLabels:
      if data.startswith(label):
        messageType = label
        break

    if(messageType):
      data = data.rstrip()

      record = None
      if messageType == 'GGA':
        record = parseGGA(data)
      # elif(messageType == 'something'):
      # elif(messageType == 'else'):

      if not record:
        logger.debug("Message received but no new data to post")

      else:
        collection.update_one({'label': record['label']}, {'$set': record}, upsert=True)

        forDebug = record
        forDebug['updated'] = forDebug['updated'].strftime("%Y-%m-%dT%H:%M:%SZ")
        logger.debug("Record" + json.dumps(forDebug, indent=2))

if __name__ == '__main__':

  import argparse
  import sys
  import os

  parser = argparse.ArgumentParser(description='UDP Data Caching Service')
  parser.add_argument('-d', '--debug', action='store_true', help=' display debug messages')

  args = parser.parse_args()

  # Turn on debug mode
  if args.debug:
    logger.info("Setting log level to DEBUG")
    logger.setLevel(logging.DEBUG)
    for handler in logger.handlers:
      handler.setLevel(logging.DEBUG)
    logger.debug("Log level now set to DEBUG")
    
  # Run the main loop
  try:
    insertUDPData()
  except KeyboardInterrupt:
    print('Interrupted')
    try:
      sys.exit(0)
    except SystemExit:
      os._exit(0)
