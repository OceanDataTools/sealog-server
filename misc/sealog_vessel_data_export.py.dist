#!/usr/bin/env python3
'''
FILE:           sealog_vessel_data_export.py

DESCRIPTION:    This script exports all the data for a given cruise, creates
                all the reports for that cruise, and pushes the data to the
                OpenVDM data directory for that lowering.

BUGS:
NOTES:
AUTHOR:     Webb Pinner
COMPANY:    OceanDataTools.org
VERSION:    0.3
CREATED:    2018-11-07
REVISION:   2021-05-10

LICENSE INFO:   This code is licensed under MIT license (see LICENSE.txt for details)
                Copyright (C) OceanDataTools.org 2021
'''

import os
import json
import logging
import subprocess

from python_sealog.settings import API_SERVER_FILE_PATH
from python_sealog.cruises import get_cruises, get_cruise_by_id
from python_sealog.events import get_events_by_cruise
from python_sealog.event_aux_data import get_event_aux_data_by_cruise
from python_sealog.event_exports import get_event_exports_by_cruise
from python_sealog.event_templates import get_event_templates

EXPORT_ROOT_DIR = '/home/sealog/sealog-export'
VESSEL_NAME = 'Discoverer'

OPENVDM_IP='openvdm.oceandatatools.org'
OPENVDM_USER='survey'
OPENVDM_SSH_KEY='/home/sealog/.ssh/id_rsa_openvdm'
CRUISEDATA_DIR_ON_DATA_WAREHOUSE='/mnt/vault/FTPRoot/CruiseData'
SEALOG_DIR='Sealog'

CREATE_DEST_DIR = False

CRUISES_FILE_PATH = os.path.join(API_SERVER_FILE_PATH, 'cruises')
IMAGES_FILE_PATH = os.path.join(API_SERVER_FILE_PATH, 'images')
LOWERINGS_FILE_PATH = os.path.join(API_SERVER_FILE_PATH, 'lowerings')

REPORTS_DIRNAME = 'Reports'
IMAGES_DIRNAME = 'Images'
FILES_DIRNAME = 'Files'

def _verify_source_directories():

    if not os.path.isdir(CRUISES_FILE_PATH):
        return False, "cannot find cruises file path"

    if not os.path.isdir(IMAGES_FILE_PATH):
        return False, "cannot find images file path"

    if not os.path.isdir(LOWERINGS_FILE_PATH):
        return False, "cannot find lowerings file path"

    return True, ''


def _build_cruise_export_dirs(cruise):

    logging.info("Building cruise-level export directories")

    try:
        os.mkdir(os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id']))
    except FileExistsError:
        logging.debug("cruise export directory already exists")
    except Exception as err:
        logging.error("Could not create cruise export directory")
        logging.debug(str(err))
        sys.exit(1)

    try:
        os.mkdir(os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], REPORTS_DIRNAME))
    except FileExistsError:
        logging.debug("cruise export reports directory already exists")
    except Exception as err:
        logging.error("Could not create cruise reports export directory")
        logging.debug(str(err))
        sys.exit(1)


def _export_cruise_sealog_data_files(cruise): #pylint: disable=too-many-statements

    logging.info("Exporting cruise-level data files")

    filename = VESSEL_NAME + '_' + cruise['cruise_id'] + '_cruiseRecord.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], filename)

    logging.info("Export Cruise Record: %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(cruise))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VESSEL_NAME + '_' + cruise['cruise_id'] + '_eventOnlyExport.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], filename)

    logging.info("Export Events (json-format): %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(get_events_by_cruise(cruise['id'])))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VESSEL_NAME + '_' + cruise['cruise_id'] + '_eventOnlyExport.csv'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], filename)

    logging.info("Export Events (csv-format): %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(get_events_by_cruise(cruise['id'], 'csv'))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VESSEL_NAME + '_' + cruise['cruise_id'] + '_auxDataExport.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], filename)

    logging.info("Export Aux Data: %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(get_event_aux_data_by_cruise(cruise['id'])))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VESSEL_NAME + '_' + cruise['cruise_id'] + '_sealogExport.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], filename)

    logging.info("Export Events with Aux Data (json-format): %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(get_event_exports_by_cruise(cruise['id'])))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VESSEL_NAME + '_' + cruise['cruise_id'] + '_sealogExport.csv'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], filename)

    logging.info("Export Events with Aux Data (csv-format): %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(get_event_exports_by_cruise(cruise['id'], 'csv'))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))

    filename = VESSEL_NAME + '_' + cruise['cruise_id'] + '_eventTemplates.json'
    dest_filepath = os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], filename)

    logging.info("Export Event Templates: %s", filename)
    try:
        with open(dest_filepath, 'w') as file:
            file.write(json.dumps(get_event_templates()))
    except Exception as err:
        logging.error('could not create data file: %s', dest_filepath)
        logging.debug(str(err))


def _push_2_data_warehouse(cruise):

    if CREATE_DEST_DIR:
        command = ['ssh', '-i', OPENVDM_SSH_KEY, OPENVDM_USER + '@' + OPENVDM_IP, 'cd ' + os.path.join(CRUISEDATA_DIR_ON_DATA_WAREHOUSE, cruise['cruise_id']) + '; test -d ' + SEALOG_DIR + ' || mkdir -p ' + SEALOG_DIR + '']
        logging.debug(' '.join(command))
        subprocess.call(command)

    command = ['rsync','-trimv','--progress', '--delete', '-e', 'ssh -i ' + OPENVDM_SSH_KEY, os.path.join(EXPORT_ROOT_DIR, cruise['cruise_id'], ''), OPENVDM_USER + '@' + OPENVDM_IP + ':' + os.path.join(CRUISEDATA_DIR_ON_DATA_WAREHOUSE,cruise['cruise_id'],SEALOG_DIR, '')]
    logging.debug(' '.join(command))
    subprocess.call(command)

if __name__ == '__main__':

    import argparse
    import sys

    parser = argparse.ArgumentParser(description='Sealog ' + VESSEL_NAME + ' Data export')
    parser.add_argument('-v', '--verbosity', dest='verbosity',
                        default=0, action='count',
                        help='Increase output verbosity')
    parser.add_argument('-n', '--no-transfer', action='store_true', default=False, help='build reports and export data but do not push to data warehouse')
    parser.add_argument('-c', '--current_cruise', action='store_true', default=False, help=' export the data for the most recent cruise')
    parser.add_argument('-C', '--cruise_id', help='export all cruise and lowering data for the specified cruise (i.e. FK200126)')

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).

    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    if parsed_args.current_cruise and parsed_args.cruise_id:
        logging.error("Can not specify current_cruise and also a cruise {(-c)}")
        sys.exit(0)

    cruise = None

    # if exporting the current cruise
    if parsed_args.current_cruise:
        cruise = next(iter(get_cruises()), None)

    # if exporting a specific current cruise
    elif parsed_args.cruise_id:
        cruise = get_cruise_by_id(parsed_args.cruise_id)

    # if no cruise found, exit
    if cruise is None:
        logging.error("Cruise %s not found", parsed_args.cruise_id)
        sys.exit(0)

    # Verify source directories
    success, msg = _verify_source_directories()
    if not success:
        logging.error(msg)
        sys.exit(0)

    # Verify export root directory
    if not os.path.isdir(EXPORT_ROOT_DIR):
        logging.error("cannot find export directory: %s", EXPORT_ROOT_DIR)
        sys.exit(1)

    logging.info("Cruise ID: %s", cruise['cruise_id'])
    if 'cruise_name' in cruise['cruise_additional_meta']:
        logging.info("Cruise Name: %s", cruise['cruise_additional_meta']['cruise_name'])

    # cruise source dir
    cruise_source_dir = os.path.join(CRUISES_FILE_PATH, cruise['id'])

    #verify cruise source directory exists
    try:
        os.path.isdir(cruise_source_dir)
    except Exception as err:
        logging.error('cannot find source directory for cruise: %s', cruise_source_dir)
        logging.debug(str(err))
        sys.exit(1)

    # build cruise export dirs
    _build_cruise_export_dirs(cruise)

    # export cruise data files
    _export_cruise_sealog_data_files(cruise)

    if not parsed_args.no_transfer:
        _push_2_data_warehouse(cruise)

    logging.debug("Done")
