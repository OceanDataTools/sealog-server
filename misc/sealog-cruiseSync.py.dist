#!/usr/bin/env python3
# ----------------------------------------------------------------------------------- #
#
#         FILE:  sealog-cruiseSync.py
#
#  DESCRIPTION:  This script listens for new cruise records and cruise record updates
#                and syncs those new/updated records with other sealog instances
#
#         BUGS:
#        NOTES:
#       AUTHOR:  Webb Pinner
#      COMPANY:  Capable Solutions
#      VERSION:  0.1
#      CREATED:  2021-04-21
#     REVISION:  
#
# LICENSE INFO: This code is licensed under MIT license (see LICENSE.txt for details)
#               Copyright (C) Capable Solutions 2021
#
# ----------------------------------------------------------------------------------- #

import asyncio
import websockets
import json
import logging
import time
import requests

import python_sealog
from python_sealog.settings import wsServerURL, headers

clientWSID = 'cruiseSync'

hello = {
  'type': 'hello',
  'id': clientWSID,
  'auth': {
    'headers': headers
  },
  'version': '2',
  'subs': ['/ws/status/newCruises', '/ws/status/updateCruises']
}

ping = {
  'type':'ping',
  'id':clientWSID
}

sealogServerInstances = [
  {
    'apiServerURL': '',
    'token':'' 
  }
]


def updateCruiseRecord(cruise_record):

  for instance in sealogServerInstances: 
    # check to see if a cruise record with the cruiseID in cruise_record already exists

    headers = {
      "authorization": instance['token']
    }

    cruise_found = None

    try:
      url = instance['apiServerURL'] + '/sealog-server/api/v1/cruises/' + cruise_record['id']
      r = requests.get(url, headers=headers)

      if r.status_code != 404:
        logging.debug("Cruise found for Cruise UID: %s" % cruise_record['id'])
        logging.debug(r.text)
        cruise_found = json.loads(r.text)
        logging.debug(json.dumps(cruise_found, indent=2))

      else:
        logging.debug("Cruise NOT found for Cruise UID: %s" % cruise_record['id'])

    except Exception as error:
      logging.error(str(error))
      raise error

    # if a cruise record with the cruiseID does exist, perform an update
    if cruise_found is not None:
      try:
        url = instance['apiServerURL'] + '/sealog-server/api/v1/cruises/' + cruise_found['id']
        logging.debug(url)
        logging.debug(json.dumps(cruise_record))
        del cruise_record['id']
        r = requests.patch(url, headers=headers, data = json.dumps(cruise_record))
        logging.debug(r.text)

      except Exception as error:
        logging.error('Error updating custom variable ID')
        logging.debug(str(error))
        raise error

    # if a cruise record with the cruiseID does NOT exist, perform an insert
    else:
      try:
        url = instance['apiServerURL'] + '/sealog-server/api/v1/cruises'
        logging.debug(url)
        logging.debug(json.dumps(cruise_record))
        r = requests.post(url, headers=headers, data = json.dumps(cruise_record))
        logging.debug(r.text)

      except Exception as error:
        logging.error('Error updating custom variable ID')
        logging.debug(str(error))
        raise error


# -------------------------------------------------------------------------------------
# The main loop of the utility
# -------------------------------------------------------------------------------------
async def cruiseSync():
  try:
    async with websockets.connect(wsServerURL) as websocket:

      await websocket.send(json.dumps(hello))

      while(True):

        cruise = await websocket.recv()
        cruiseObj = json.loads(cruise)

        if cruiseObj['type'] and cruiseObj['type'] == 'ping':

          await websocket.send(json.dumps(ping))

        elif cruiseObj['type'] and cruiseObj['type'] == 'pub':

          logging.debug(json.dumps(cruiseObj, indent=2));
          logging.info("Updating cruise record on other sealog instances")
          updateCruiseRecord(cruiseObj['message'])
          time.sleep(2);

        else:
          logging.debug("Skipping because cruise value is in the exclude set")

  except Exception as error:
    logging.error(str(error))

# -------------------------------------------------------------------------------------
# Required python code for running the script as a stand-alone utility
# -------------------------------------------------------------------------------------
if __name__ == '__main__':

  import argparse
  import os
  import sys

  parser = argparse.ArgumentParser(description='Cruise Sync Service')
  parser.add_argument('-v', '--verbosity', dest='verbosity',
                      default=0, action='count',
                      help='Increase output verbosity')

  parsed_args = parser.parse_args()

  ############################
  # Set up logging before we do any other argument parsing (so that we
  # can log problems with argument parsing).
  
  LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
  logging.basicConfig(format=LOGGING_FORMAT)

  LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
  parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
  logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])
  
  # Run the main loop
  try:
    asyncio.get_event_loop().run_until_complete(cruiseSync())
  except KeyboardInterrupt:
    print('Interrupted')
    try:
      sys.exit(0)
    except SystemExit:
      os._exit(0)