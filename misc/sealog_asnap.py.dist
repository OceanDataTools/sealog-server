#!/usr/bin/env python3
'''
FILE:           sealog_asnap.py

DESCRIPTION:    This script generates and submits ASNAP events to the sealog-
                server at a specified interval.

BUGS:
NOTES:
AUTHOR:     Webb Pinner
COMPANY:    OceanDataTools.org
VERSION:    1.1
CREATED:    2018-09-26
REVISION:   2023-02-10

LICENSE INFO:   This code is licensed under MIT license (see LICENSE.txt for details)
                Copyright (C) OceanDataTools.org 2024
'''

import sys
import json
import time
import logging
import requests

from datetime import datetime, timedelta

from os.path import dirname, realpath
sys.path.append(dirname(dirname(realpath(__file__))))

from misc.python_sealog.custom_vars import get_custom_var_by_name
from misc.python_sealog.settings import API_SERVER_URL, EVENTS_API_PATH, HEADERS

ASNAP_STATUS_VAR_NAME = 'asnapStatus'

DEFAULT_INTERVAL = 10 #seconds

ASNAP_EVENT = {
    "event_value": "ASNAP",
    "event_options": [],
    "event_free_text": ""
}

def iso8601_to_datetime(timestamp):
    try:
        return datetime.fromisoformat(timestamp)
    except ValueError:
        raise argparse.ArgumentTypeError(f"Invalid ISO8601 timestamp format: {timestamp}")

def submit_asnap_event(event):
    try:
        logging.info("Submitting ASNAP Event")
        requests.post(API_SERVER_URL + EVENTS_API_PATH, headers=HEADERS, data = json.dumps(event))

    except Exception as error:
        logging.error("Error submitting new ASNAP event: %s", json.dumps(event))
        logging.debug(str(error))


def asnap_service(interval, timeout=0):
    """
    Submit ASNAP events to the sealog-server at the specified interval
    """

    run_flag = False
    timeout_endtime = None

    # wait for even second
    wait_time = 1 - (time.time() % 1)
    logging.debug("Waiting %0.3f seconds", wait_time)
    time.sleep(wait_time)

    while True:

        # get asnap variable from Sealog server API
        try:
            asnap_status = get_custom_var_by_name(ASNAP_STATUS_VAR_NAME)

            # turn on run flag based on custom var
            run_flag = asnap_status['custom_var_value'] == 'On'

        except Exception as error:
            logging.error("Error retrieving the asnapStatus variable")
            logging.debug(str(error))
            time.sleep(5)
            continue

        # when ASNAP turns on, start timeout
        if timeout > 0 and timeout_endtime is None and run_flag: 
            timeout_endtime = datetime.now() + timedelta(minutes=timeout)

        # when ASNAP turns off, reset timeout
        if timeout_endtime is not None and not run_flag: 
            timeout_endtime = None

        # if timeout has expired, exit program
        if timeout_endtime and datetime.now() > timeout_endtime:
            break

        if run_flag:
            submit_asnap_event(ASNAP_EVENT)

        wait_time = 1 - (time.time() % 1)
        time.sleep(interval - 1 + wait_time)

def add_asnap_events(interval, start_ts, stop_ts):
    # Define interval (5 minutes)
    interval = timedelta(seconds=interval)

    # Initialize current time as start time
    current_ts = start_ts

    # Loop through the time intervals
    while current_ts <= stop_ts:
        event = ASNAP_EVENT
        event['ts'] = current_ts.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
        submit_asnap_event(event)

        current_ts += interval

# -------------------------------------------------------------------------------------
# Required python code for running the script as a stand-alone utility
# -------------------------------------------------------------------------------------
if __name__ == '__main__':

    import argparse
    import os

    parser = argparse.ArgumentParser(description='ASNAP event submission service')
    parser.add_argument('-v', '--verbosity', dest='verbosity',
                        default=0, action='count',
                        help='Increase output verbosity')
    parser.add_argument('-i', '--interval', default=DEFAULT_INTERVAL, type=int, help='ASNAP interval in seconds.')
    parser.add_argument('-t', '--timeout', dest='timeout', default=0, type=int, help="set a timeout (in minutes) to stop submitting ASNAP events")
    parser.add_argument('--start_ts', type=iso8601_to_datetime, help="Add ASNAP events at the specified interval start at this specified start time (UTC)")
    parser.add_argument('--stop_ts', type=iso8601_to_datetime, default=datetime.utcnow(), help="Add ASNAP events until the specified stop time (UTC)")
    

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).

    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    logging.info("Interval set to %s seconds.", parsed_args.interval)

    if parsed_args.timeout != 0:
        logging.info("Timeout set to %s minutes.", parsed_args.timeout)

    if parsed_args.start_ts:
        if parsed_args.start_ts > parsed_args.stop_ts:
            raise argparse.ArgumentTypeError(f"Start date/time cannot be newer than stop date/time.")

        add_asnap_events(parsed_args.interval, parsed_args.start_ts, parsed_args.stop_ts)
        sys.exit(0)


    try:
        asnap_service(parsed_args.interval, parsed_args.timeout)
    except KeyboardInterrupt:
        print('Interrupted')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0) # pylint: disable=protected-access
