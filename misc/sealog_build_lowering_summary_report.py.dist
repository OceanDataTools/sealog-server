#!/usr/bin/env python3
'''
FILE:           sealog_build_lowering_summary_report.py

DESCRIPTION:    Build the lowering summary report.

BUGS:
NOTES:
AUTHOR:     Webb Pinner
COMPANY:    OceanDataTools.org
VERSION:    0.1
CREATED:    2021-05-03
REVISION:

LICENSE INFO:   This code is licensed under MIT license (see LICENSE.txt for details)
                Copyright (C) OceanDataTools.org 2021
'''

import logging
from io import BytesIO
from datetime import datetime

from reportlab.platypus import NextPageTemplate, Paragraph, PageBreak, Spacer, Image
from reportlab.platypus.tableofcontents import TableOfContents
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm, mm

from reporting.sealog_doc_template import RLDocTemplate
from reporting.sealog_report_builder import LoweringReportCreator

from python_sealog.settings import API_SERVER_FILE_PATH
from python_sealog.lowerings import get_lowering_uid_by_id

PAGE_SIZE = A4
PAGE_WIDTH, PAGE_HEIGHT= PAGE_SIZE
BASE_MARGIN = 1 * cm

AUTHOR = "OceanDataTools.org"
VEHICLE_NAME = 'Explorer'

class LoweringSummaryReport(LoweringReportCreator): # pylint: disable=too-few-public-methods
    '''
    Build lowering summary report
    '''

    def export_pdf(self): # pylint: disable=too-many-locals,too-many-statements
        '''
        Export report to pdf data
        '''

        report_buffer = BytesIO()

        doc = RLDocTemplate(
            report_buffer,
            pagesize=PAGE_SIZE,
            leftMargin=BASE_MARGIN,
            rightMargin=BASE_MARGIN,
            topMargin=BASE_MARGIN,
            bottomMargin=BASE_MARGIN,
            title="Lowering Summary Report: %s_%s" % (self.cruise_record['cruise_id'], self.lowering_record['lowering_id']),
            subtitle="Remotely Operated Vehicle: " + VEHICLE_NAME,
            author=AUTHOR
        )

        summary_table = self._build_summary_table()
        sample_table = self._build_sample_table()
        free_form_table = self._build_free_form_table()
        problem_tables = self._build_problem_tables()
        event_breakdown_table = self._build_event_breakdown_table()
        events_table = self._build_events_table()

        depth_plot_filename = self._build_depth_plot()
        if depth_plot_filename:
            depth_plot = Image(depth_plot_filename)
            depth_plot._restrictSize(PAGE_WIDTH -5 * cm, 10 * cm) # pylint: disable=protected-access
            depth_plot.hAlign = 'CENTER'

        dive_track_filename = self._build_dive_track()
        if dive_track_filename:
            dive_track = Image(dive_track_filename)
            dive_track._restrictSize(PAGE_WIDTH - 5 * cm, PAGE_HEIGHT - 5 * cm) # pylint: disable=protected-access
            dive_track.hAlign = 'CENTER'

        toc = TableOfContents()
        toc.levelStyles = [ self.toc_heading_1, self.toc_heading_2 ]

        logging.debug("Building flowables array")

        flowables = []

        flowables.append(NextPageTemplate('Normal'))
        flowables.append(Paragraph("Cruise Summary:", self.cover_header))
        flowables.append(Paragraph("<b>Cruise ID:</b> %s" % self.cruise_record['cruise_id'], self.body_text))
        flowables.append(Paragraph("<b>Cruise PI:</b> %s" % self.cruise_record['cruise_additional_meta']['cruise_pi'] or '', self.body_text))
        flowables.append(Paragraph("<b>Cruise Description:</b> %s" % self.cruise_record['cruise_additional_meta']['cruise_description'] or '', self.body_text))
        flowables.append(Paragraph("<b>Cruise Location:</b> %s" % self.cruise_record['cruise_location'] or '', self.body_text))
        flowables.append(Paragraph("<b>Cruise Ports:</b> %s" % self.cruise_record['cruise_additional_meta']['cruise_departure_location'] or '' + " --> " + self.cruise_record['cruise_additional_meta']['cruise_arrival_location'] or '', self.body_text))
        flowables.append(Paragraph("<b>Cruise Dates:</b> %s --> %s" % (datetime.fromisoformat(self.cruise_record['start_ts'][:-1]).strftime('%Y-%m-%d'), datetime.fromisoformat(self.cruise_record['stop_ts'][:-1]).strftime('%Y-%m-%d')), self.body_text))
        flowables.append(Paragraph("Lowering Summary:", self.cover_header))
        flowables.append(Paragraph("<b>Lowering Number:</b> %s" % self.lowering_record['lowering_id'] or '', self.body_text))
        flowables.append(Paragraph("<b>Lowering Summary:</b> %s" % self.lowering_record['lowering_additional_meta']['lowering_description'] or '', self.body_text))
        flowables.append(Paragraph("<b>Lowering Location:</b> %s" % self.lowering_record['lowering_location'] or '', self.body_text))
        flowables.append(Spacer(PAGE_WIDTH, 5 * mm))
        flowables.append(summary_table)
        flowables.append(NextPageTemplate('TOC'))
        flowables.append(PageBreak())
        flowables.append(toc)
        flowables.append(NextPageTemplate('Normal'))
        flowables.append(PageBreak())

        flowables.append(Paragraph("Lowering Information:", self.heading_1))

        if dive_track_filename:
            flowables.append(Paragraph("Trackline:", self.heading_2))
            flowables.append(Spacer(PAGE_WIDTH, 1 * cm))
            flowables.append(dive_track)
            flowables.append(Spacer(PAGE_WIDTH, 1 * cm))

        if depth_plot_filename:
            flowables.append(Paragraph("Depth Profile:", self.heading_2))
            flowables.append(depth_plot)

        flowables.append(PageBreak())
        flowables.append(Paragraph("Events:", self.heading_1))
        flowables.append(event_breakdown_table)
        flowables.append(Paragraph("All Events:", self.heading_2))
        flowables.append(events_table)
        flowables.append(Spacer(PAGE_WIDTH, 1 * cm))

        flowables.append(Paragraph("Event - FREE_FORM:", self.heading_2))
        if not free_form_table:
            flowables.append(Paragraph("No FREE_FORM events recorded for this dive", self.body_text))
        else:
            flowables.append(free_form_table)

        flowables.append(Spacer(PAGE_WIDTH, 1 * cm))

        flowables.append(Paragraph("Event - SAMPLE:", self.heading_2))
        if not sample_table:
            flowables.append(Paragraph("No SAMPLE events recorded for this dive", self.body_text))
        else:
            flowables.append(sample_table)

        flowables.append(Spacer(PAGE_WIDTH, 1 * cm))

        flowables.append(Paragraph("Problems:", self.heading_1))
        if len(problem_tables) == 0:
            flowables.append(Paragraph("No PROBLEM events recorded for this dive", self.body_text))
            flowables.append(Spacer(PAGE_WIDTH, 1 * cm))

        else:
            for table in enumerate(problem_tables):
                flowables.append(problem_tables[table])
                flowables.append(Spacer(PAGE_WIDTH, 1 * cm))
            flowables.append(PageBreak())

        logging.info('Building report')

        doc.multiBuild(
            flowables
        )
        pdf_data = report_buffer.getvalue()
        report_buffer.close()
        return pdf_data


# -------------------------------------------------------------------------------------
# Required python code for running the script as a stand-alone utility
# -------------------------------------------------------------------------------------
if __name__ == '__main__':

    import argparse
    import os
    import sys

    parser = argparse.ArgumentParser(description='Build Lowering Summary Report')
    parser.add_argument('-v', '--verbosity', dest='verbosity',
                        default=0, action='count',
                        help='Increase output verbosity')
    parser.add_argument('-o','--output_dir', help='output directory to save report')
    parser.add_argument('lowering_id', help='lowering_id to build report for (i.e. S0312).')

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).

    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    # verify lowering exists
    lowering_uid = get_lowering_uid_by_id(parsed_args.lowering_id)

    if lowering_uid is None:
        logging.error("No lowering found for lowering_id: %s", parsed_args.lowering_id)
        sys.exit(0)

    try:
        summary_report = LoweringSummaryReport(lowering_uid)
        OUTPUT_PATH = parsed_args.output_dir if parsed_args.output_dir else os.path.join(API_SERVER_FILE_PATH, 'lowerings', lowering_uid)
        REPORT_FILENAME = parsed_args.lowering_id + '_Lowering_Summary_Report.pdf'

        try:
            with open(os.path.join(OUTPUT_PATH, REPORT_FILENAME), 'wb') as file:
                file.write(summary_report.export_pdf())

        except Exception as err:
            logging.error("Unable to build report: %s", os.path.join(OUTPUT_PATH, REPORT_FILENAME))
            logging.debug(str(err))
            raise err

    except KeyboardInterrupt:
        logging.warning('Interrupted')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0) # pylint: disable=protected-access
