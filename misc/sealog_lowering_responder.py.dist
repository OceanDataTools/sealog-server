#!/usr/bin/env python3
'''
FILE:           sealog_lowering_responder.py

DESCRIPTION:    This service listens for new lowerings submitted to Sealog and
                responds as directed.

BUGS:
NOTES:
AUTHOR:     Webb Pinner
COMPANY:    OceanDataTools.org
VERSION:    0.1
CREATED:    2020-01-24
REVISION:   2021-04-27

LICENSE INFO:   This code is licensed under MIT license (see LICENSE.txt for details)
                Copyright (C) OceanDataTools.org 2021
'''

import json
import time
import logging
import asyncio
import websockets

from python_sealog.settings import WS_SERVER_URL, HEADERS

CLIENT_WSID = 'loweringResponder'

HELLO = {
    'type': 'hello',
    'id': CLIENT_WSID,
    'auth': {
        'headers': HEADERS
    },
    'version': '2',
    'subs': ['/ws/status/newLowerings', '/ws/status/updateLowerings']
}

PING = {
    'type':'ping',
    'id':CLIENT_WSID
}

async def lowering_response():
    '''
    Connect to the newLowerings and updateLowerings websocket subscriptions. When a
    message is received, respond accrdingly.
    '''

    try:
        async with websockets.connect(WS_SERVER_URL) as websocket:

            await websocket.send(json.dumps(HELLO))

            while True:

                lowering = await websocket.recv()
                lowering_obj = json.loads(lowering)

                if lowering_obj['type'] and lowering_obj['type'] == 'ping':

                    await websocket.send(json.dumps(PING))

                elif lowering_obj['type'] and lowering_obj['type'] == 'pub':

                    logging.debug(json.dumps(lowering_obj, indent=2))
                    time.sleep(2)

                else:
                    logging.debug("Skipping because lowering value is in the exclude set")

    except Exception as err:
        logging.error(str(err))


# -------------------------------------------------------------------------------------
# Required python code for running the script as a stand-alone utility
# -------------------------------------------------------------------------------------
if __name__ == '__main__':

    import argparse
    import os
    import sys

    parser = argparse.ArgumentParser(description='Lowering Responder Service')
    parser.add_argument('-v', '--verbosity', dest='verbosity',
                        default=0, action='count',
                        help='Increase output verbosity')

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).

    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    # Run the main loop
    try:
        asyncio.get_event_loop().run_until_complete(lowering_response())
    except KeyboardInterrupt:
        print('Interrupted')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0) #pylint: disable=protected-access
