#!/usr/bin/env python3
#
#  Purpose: This service listens for new cruises submitted to Sealog and responds as directed.
#
#    Usage: Type python3 sealog-cruiseResponder.py to start the service.
#
#           This serivce runs in the forground. Type ^d to kill the
#           service.
#
#   Author: Webb Pinner webbpinner@gmail.com
#  Created: 2020-01-24
# Modified: 2020-01-24

import asyncio
import websockets
import json
import logging

import python_sealog
from python_sealog.settings import wsServerURL, headers

clientWSID = 'cruiseResponder'

hello = {
  'type': 'hello',
  'id': clientWSID,
  'auth': {
    'headers': headers
  },
  'version': '2',
  'subs': ['/ws/status/newCruises', '/ws/status/updateCruises']
}

ping = {
  'type':'ping',
  'id':clientWSID
}

LOG_LEVEL = logging.INFO

# create logger
logger = logging.getLogger(__file__ )
logger.setLevel(LOG_LEVEL)

# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(LOG_LEVEL)

# create formatter
formatter = logging.Formatter('%(asctime)s - %(name)s:%(lineno)s - %(levelname)s - %(message)s')

# add formatter to ch
ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(ch)

async def cruiseResponse():
  try:
    async with websockets.connect(wsServerURL) as websocket:

      await websocket.send(json.dumps(hello))

      while(True):

        cruise = await websocket.recv()
        cruiseObj = json.loads(cruise)

        if cruiseObj['type'] and cruiseObj['type'] == 'ping':

          await websocket.send(json.dumps(ping))

        elif cruiseObj['type'] and cruiseObj['type'] == 'pub':

          logger.debug(json.dumps(cruiseObj, indent=2));

        else:
          logger.debug("Skipping because cruise value is in the exclude set")

  except Exception as error:
    logger.error(str(error))

if __name__ == '__main__':

  import argparse
  import os
  import sys

  parser = argparse.ArgumentParser(description='Cruise Responder Service')
  parser.add_argument('-d', '--debug', action='store_true', help=' display debug messages')

  args = parser.parse_args()

  # Turn on debug mode
  if args.debug:
    logger.info("Setting log level to DEBUG")
    logger.setLevel(logging.DEBUG)
    for handler in logger.handlers:
      handler.setLevel(logging.DEBUG)
    logger.debug("Log level now set to DEBUG")
  
  # Run the main loop
  try:
    asyncio.get_event_loop().run_until_complete(cruiseResponse())
  except KeyboardInterrupt:
    print('Interrupted')
    try:
      sys.exit(0)
    except SystemExit:
      os._exit(0)