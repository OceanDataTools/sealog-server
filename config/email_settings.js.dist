// The sender address for all emails
const senderAddress = '<SENDER_ADDRESS>';

// Additional receipents for and sent emails.
const notificationEmailAddresses = ['<BCC_ADDRESS>'];

// Needed for email integration
let emailTransporter = null; //eslint-disable-line prefer-const
const Nodemailer = require('nodemailer'); // eslint-disable-line no-unused-vars

// ========================================================================= //
// Uncomment ONE of the following sections for email integration
// ========================================================================= //

// ------------------------------------------------------------------------- //
// GMail integration
// To setup OAuth2 access for nodemailer please refer to:
// https://rupali.hashnode.dev/send-emails-in-nodejs-using-nodemailer-gmail-oauth2
// ------------------------------------------------------------------------- //
// const { google } = require('googleapis'); // eslint-disable-line no-unused-vars

// const OAuth2 = google.auth.OAuth2; // eslint-disable-line no-unused-vars

// const client_id = process.env.GMAIL_CLIENT_ID || '<GMAIL_CLIENT_ID>';
// const client_secret = process.env.GMAIL_CLIENT_SECRET || '<GMAIL_CLIENT_SECRET>';
// const server_url = process.env.GMAIL_SERVER_URL || '<GMAIL_SERVER_URL>';
// const refresh_token = process.env.GMAIL_REFRESH_TOKEN || '<GMAIL_REFRESH_TOKEN>';

// const createTransporter = async (clientId, clientSecret, serverUrl, refreshToken) => {

//   try {
//     const oauth2Client = new OAuth2(
//       clientId,
//       clientSecret,
//       serverUrl
//     );

//     oauth2Client.setCredentials({
//       refresh_token: refreshToken
//     });

//     const accessToken = await new Promise((resolve, reject) => {

//       oauth2Client.getAccessToken((err, token) => {

//         if (err) {
//           console.log('*ERR: ', err);
//           reject();
//         }

//         resolve(token);
//       });
//     });

//     const transporter = Nodemailer.createTransport({
//       service: 'gmail',
//       auth: {
//         type: 'OAuth2',
//         user: senderAddress,
//         accessToken,
//         clientId,
//         clientSecret,
//         refreshToken
//       }
//     });
//     return transporter;
//   }
//   catch (err) {
//     return err;
//   }
// };

// emailTransporter = createTransporter(client_id, client_secret, server_url, refresh_token); // eslint-disable-line no-dupe-keys


// ------------------------------------------------------------------------- //
// Mailgun integration
// ------------------------------------------------------------------------- //
// const Mg = require('nodemailer-mailgun-transport'); // eslint-disable-line no-unused-vars
// emailTransporter = Nodemailer.createTransport(Mg({
//   auth: {
//     api_key: process.env.MG_APIKEY || '<MG_API_KEY>',
//     domain: process.env.MG_DOMAIN || '<ONE OF THE DOMAIN NAMES LISTED AT https://app.mailgun.com/app/sending/domains>'
//   }
// })); // eslint-disable-line no-dupe-keys


// ------------------------------------------------------------------------- //
// Mailjet integration
// ------------------------------------------------------------------------- //
// const Mj = require('../lib/nodemailer-mailjet-transport'); // eslint-disable-line no-unused-vars
// emailTransporter = Nodemailer.createTransport(Mj({
//   auth: {
//     apiKey: process.env.MJ_APIKEY_PUBLIC || '<MJ_APIKEY>',
//     apiSecret: process.env.MJ_APIKEY_PRIVATE || '<MJ_API_SECRET>'
//   }
// })); // eslint-disable-line no-dupe-keys

module.exports = {
  senderAddress,
  emailTransporter,
  notificationEmailAddresses
};
